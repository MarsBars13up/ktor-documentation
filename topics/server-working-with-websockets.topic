<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Create a WebSocket application in Kotlin with Ktor" id="server-working-with-websockets">
    <show-structure for="chapter" depth="2"/>
    <tldr>
        <var name="example_name" value="tutorial-websockets-server"/>
        <include from="lib.topic" element-id="download_example"/>
        <p>
            <b>Used plugins</b>: <a href="server-routing.md"/>,<a href="server-static-content.md">Static Content</a>,
            <a href="server-serialization.md">Content Negotiation</a>, <a href="server-websockets.md">WebSockets</a>,
            kotlinx.serialization
        </p>
    </tldr>
    <link-summary>
        Learn how to harness the power of WebSockets to send and receive content.
    </link-summary>
    <web-summary>
        Learn how to build a WebSocket application in Kotlin with Ktor. This tutorial will walk you through the process
        of connecting your backend services with a client, through WebSockets.
    </web-summary>
    <p>
        This article will walk you through the process of working with WebSockets in Kotlin with Ktor. It builds on the
        material covered in the <a href="server-create-restful-apis.topic">Create RESTful APIs</a> tutorial. We will
        take the service developed in that tutorial and incrementally add the ability to exchange Task objects with a
        client, through a WebSocket connection.
    </p>
    <p>This article will teach you how to do the following:</p>
    <list>
        <li>Create services that use JSON serialization.</li>
        <li>Send and receive content through a WebSocket connection.</li>
        <li>Broadcast content to multiple clients simultaneously.</li>
    </list>

    <chapter title="Prerequisites" id="prerequisites">
        <p>You can do this tutorial independently, however, we recommend that you complete the
            <a href="server-create-restful-apis.topic">Create RESTful APIs</a> tutorial to get familiar with Content
            Negotiation and REST.
        </p>
        <p>We recommend that you install <a href="https://www.jetbrains.com/help/idea/installation-guide.html">IntelliJ
            IDEA</a>, but you could use another IDE of your choice.
        </p>
    </chapter>
    <chapter title="Hello WebSockets" id="hello-websockets">
        <p>
            In this tutorial, you will build on the Task Manager service developed in the previous article by adding the
            ability to exchange Task objects with a client,
            through a WebSocket connection. To do this, you will need to add the <a href="server-websockets.md">WebSockets
            Plugin</a>. You could manually add it to your existing project, however for the sake of this tutorial, we
            will start from scratch by creating a new project.
        </p>
        <procedure title="Create the initial project with plugins" id="create=project">
            <step>
                <include from="lib.topic" element-id="generate_project_step_1"/>
            </step>
            <step>
                <p>In the
                    <control>Project Name</control>
                    field, enter "ktor-websockets-task-app" as the name of your project.
                </p>
                <img src="tutorial_creating_restful_apis_project_name.png"
                     alt="Naming the project in the Ktor Project Generator"
                     border-effect="line"
                     width="706"/>
            </step>
            <step>
                <p>You can leave the default values for the rest of the settings and click on
                    <control>Add plugins</control>
                    to go to the next screen.
                </p>
            </step>
            <step>
                <p>
                    In the plugins section search for and add the following plugins by clicking on the
                    <control>Add</control>
                    button:
                </p>
                <list type="bullet">
                    <li>Routing</li>
                    <li>Content Negotiation</li>
                    <li>Kotlinx.serialization</li>
                    <li>WebSockets</li>
                    <li>Static Content</li>
                </list>
                <img src="ktor_project_generator_add_plugins.gif" alt="Adding plugins in the Ktor Project Generator"
                     border-effect="line"
                     width="400"/>
            </step>
            <step>
                <p>
                    Once you have added the plugins, click on the
                    <control>5 plugins added</control>
                    link at the bottom left, to display the added plugins.
                </p>
                <p>You will then see a list of all the plugins that will be added to your project:</p>
                <img src="tutorial_creating_restful_apis_plugins_list.png"
                     alt="Plugins list in the Ktor Project Generator"
                     border-effect="line"
                     width="400"/>
            </step>
            <step>
                <include from="lib.topic" element-id="generate_project_final_step"/>
            </step>
        </procedure>
        <procedure title="Add starter code" id="add-starter-code">
            <p>Open your project in IntelliJ IDEA once it has finished downloading and follow the steps below:</p>
            <step>
                Navigate to
                <path>src/main/kotlin</path>
                and create a new subpackage called "model".
            </step>
            <step>
                <p>
                    Inside the
                    <path>model</path>
                    package create a new
                    <path>.kt</path>
                    file called “Task”.
                </p>
            </step>
            <step>
                <p>
                    Open the
                    <path>Task.kt</path>
                    file and add an <code>enum</code> to represent priorities and a <code>data class</code> to represent
                    tasks:
                </p>
                <p>
                    Note that the Task class is annotated with the <code>Serializable</code> type from the <code>kotlinx.serialization</code>
                    library. This means that instances can be converted to and from JSON, allowing their contents to be
                    transferred over the network.
                </p>
                <p>
                    Because we included the WebSockets plugin, a
                    <path>Sockets.kt</path>
                    file will have been created within the
                    <path>plugins</path>
                    package.
                </p>
            </step>
            <step>
                <p>
                    Open the
                    <path>Sockets.kt</path>
                    file and replace the existing <code>Application.configureSockets()</code> function with the
                    implementation below:
                </p>
                <p>
                    This code performs the following tasks:
                </p>
                <list>
                    <li>The WebSockets plugin is installed and configured with standard settings.</li>
                    <li>The <code>contentConverter</code> property is set, which will allow the plugin to
                        serialize objects being sent and received through the <a
                                href="https://github.com/Kotlin/kotlinx.serialization">kotlinx.serialization</a>
                        library.
                    </li>
                    <li>The routing is configured with a single endpoint, where the relative URL is <code>/tasks</code>.
                    </li>
                    <li>When a request is received, a list of tasks is serialized down the WebSocket connection.</li>
                    <li>When all the items have been sent, the server will close the connection.</li>
                </list>
                <p>
                    For the purposes of the demo, we introduce a delay of one second between sending tasks. This will
                    allow us to watch the tasks appear incrementally in our client. If we sent all the tasks together
                    this example would appear identical to the <a href="server-create-restful-apis.topic">RESTful
                    service</a> and <a href="server-build-web-application.topic">Web Application</a> developed in
                    previous articles.
                </p>
                <p>
                    The final task in this iteration is to create a client for this endpoint. Because we included the <a
                        href="server-static-content.md">Static Content</a> plugin, an
                    <path>index.html</path>
                    file has been generated for us within
                    <path>resources/static</path>
                    .
                </p>
            </step>
            <step>
                <p>
                    Open the
                    <path>index.html</path>
                    file and replace the existing content with the following:
                </p>
                <p>
                    This page uses the <a href="https://websockets.spec.whatwg.org//#websocket">WebSocket type</a>,
                    which is available in all modern browsers. We create this object in JavaScript, passing the URL of
                    our endpoint into the constructor. Then we attach event handlers for the <code>onopen</code>, <code>onclose</code>
                    and <code>onmessage</code> events. When the <code>onmessage</code> event fires, we add a row to a
                    table using the methods of the document object.
                </p>
            </step>
            <step>
                <p>
                    Navigate to the URL <a href="http://0.0.0.0:8080/static/index.html">http://0.0.0.0:8080/static/index.html</a>.
                    You should see a form with a button and an empty table:
                </p>
                <p>
                    When you click on the form the tasks should be loaded from the server, at a rate of one per second.
                    As a result, the table should be populated incrementally. If you open the
                    <control>JavaScript Console</control>
                    in your browser's
                    <control>developer tools</control>
                    you can also view the messages we are logging.
                </p>
                <p>
                    We can see that our Ktor service is performing as expected. A WebSocket connection is opened, the
                    items are sent to the client, and then the connection is closed. There is a lot of complexity in the
                    underlying networking, but by default, Ktor handles all of this for us.
                </p>
            </step>
        </procedure>
    </chapter>
    <chapter title="Understanding WebSockets" id="understanding-websockets">
        <p>
            Before moving to the next iteration, it may be helpful to review some of the fundamentals of WebSockets.
            Feel free to skip this section if you have used WebSockets before.
        </p>
        <p>
            In previous tutorials, your clients were sending HTTP Requests and receiving HTTP Responses. This works well
            and enables the Internet to be scalable and resilient.
        </p>
        <p>However, it is not suitable in scenarios where:</p>
        <list>
            <li>Content is going to be generated incrementally over time.</li>
            <li>Content will be changing frequently in response to events.</li>
            <li>Clients need to interact with the server as content is produced.</li>
            <li>Data sent by one client needs to be quickly propagated to others.</li>
        </list>
        <p>
            Examples of these scenarios include share trading, purchasing cinema and concert tickets, bidding for items
            in online auctions, and chat functionality in social media. WebSockets were created to handle these kinds of
            situations.
        </p>
        <p>
            A WebSocket connection is made over TCP and can last for an extended period. The connection provides ‘full
            duplex communication’ - which means that clients can send messages to the server and vice versa.
        </p>
        <p>
            The WebSocket API defines four events (open, message, close, and error) and two actions (send and close).
            Different languages and libraries expose this functionality in different ways. For example, in Kotlin the
            sequence of incoming messages can be consumed as a <a href="https://kotlinlang.org/docs/flow.html">Flow</a>.
        </p>
    </chapter>
    <chapter title="Improve the design" id="improve-design">
        <p>Next, you will refactor your existing code, to make room for more advanced examples.</p>
        <procedure>
            <step>
                <p>
                    In the
                    <path>model</path>
                    package create a new
                    <path>.kt</path>
                    file called “TaskRepository”.
                </p>
            </step>
            <step>
                <p>
                    Open
                    <path>TaskRepository.kt</path>
                    and add a <code>TaskRepository</code> type, as shown below:
                </p>
            </step>
        </procedure>
    </chapter>
</topic>